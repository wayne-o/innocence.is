const express = require('express');
const cors = require('cors');
const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');
const crypto = require('crypto');
const { ethers } = require('ethers');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3002;

// Middleware
app.use(cors());
app.use(express.json());

// Path to ZK circuits
const ZK_CIRCUITS_PATH = path.join(__dirname, '../zk-circuits/innocence-circuits');

// Cache for generated proofs
const proofCache = new Map();

// Helper to generate cache key
function getCacheKey(proofType, params) {
  const sortedParams = Object.keys(params).sort().reduce((obj, key) => {
    obj[key] = params[key];
    return obj;
  }, {});
  return crypto.createHash('sha256')
    .update(`${proofType}:${JSON.stringify(sortedParams)}`)
    .digest('hex');
}

// Helper to compute commitment
function computeCommitment(secret, nullifier) {
  return ethers.keccak256(
    ethers.AbiCoder.defaultAbiCoder().encode(
      ['bytes32', 'bytes32'],
      [secret, nullifier]
    )
  );
}

// Generate proof endpoint
app.post('/api/generate-proof/:proofType', async (req, res) => {
  const { proofType } = req.params;
  const params = req.body;

  try {
    // Validate proof type
    const validProofTypes = ['ownership', 'balance', 'compliance', 'trade'];
    if (!validProofTypes.includes(proofType)) {
      return res.status(400).json({ error: 'Invalid proof type' });
    }

    // Check cache
    const cacheKey = getCacheKey(proofType, params);
    if (proofCache.has(cacheKey)) {
      console.log(`Returning cached proof for ${proofType}`);
      return res.json(proofCache.get(cacheKey));
    }

    // Build command arguments
    let args = ['--prove'];
    
    if (params.secret) args.push(`--secret ${params.secret}`);
    if (params.nullifier) args.push(`--nullifier ${params.nullifier}`);
    
    switch (proofType) {
      case 'balance':
        if (params.balance) args.push(`--balance ${params.balance}`);
        if (params.minBalance) args.push(`--min-balance ${params.minBalance}`);
        if (params.assetId) args.push(`--asset-id ${params.assetId}`);
        break;
      
      case 'compliance':
        if (params.validDays) args.push(`--valid-days ${params.validDays}`);
        break;
      
      case 'trade':
        if (params.fromBalance) args.push(`--from-balance ${params.fromBalance}`);
        if (params.toBalance) args.push(`--to-balance ${params.toBalance}`);
        if (params.fromAsset) args.push(`--from-asset ${params.fromAsset}`);
        if (params.toAsset) args.push(`--to-asset ${params.toAsset}`);
        if (params.fromAmount) args.push(`--from-amount ${params.fromAmount}`);
        if (params.minToAmount) args.push(`--min-to-amount ${params.minToAmount}`);
        break;
    }

    // Execute proof generation
    console.log(`Generating ${proofType} proof...`);
    
    // Set environment variables for network proving if configured
    const env = { ...process.env };
    if (process.env.SP1_PROVER === 'network') {
      console.log('Using Succinct network for proof generation');
      if (process.env.PROVER_NETWORK_RPC) {
        env.PROVER_NETWORK_RPC = process.env.PROVER_NETWORK_RPC;
      }
      if (process.env.SP1_PRIVATE_KEY) {
        env.SP1_PRIVATE_KEY = process.env.SP1_PRIVATE_KEY;
      }
      if (process.env.NETWORK_PRIVATE_KEY) {
        env.NETWORK_PRIVATE_KEY = process.env.NETWORK_PRIVATE_KEY;
      }
    }
    
    const cmd = `cd ${ZK_CIRCUITS_PATH} && ./target/release/${proofType}-proof ${args.join(' ')}`;
    
    execSync(cmd, { stdio: 'inherit', env });

    // Read generated proof
    const proofPath = path.join(ZK_CIRCUITS_PATH, `${proofType}_proof.json`);
    const proofData = JSON.parse(fs.readFileSync(proofPath, 'utf8'));

    // Prepare response based on proof type
    let publicValues = {};
    const commitment = params.secret && params.nullifier ? 
      computeCommitment(params.secret, params.nullifier) : null;

    switch (proofType) {
      case 'ownership':
        publicValues = {
          commitment,
          nullifierHash: ethers.keccak256(params.nullifier)
        };
        break;
      
      case 'balance':
        // In production, get merkle root from contract
        publicValues = {
          commitment,
          merkleRoot: '0x' + '0'.repeat(64), // Placeholder
          minBalance: params.minBalance || 0,
          assetId: params.assetId || 0
        };
        break;
      
      case 'compliance':
        publicValues = {
          commitment,
          complianceAuthority: process.env.COMPLIANCE_AUTHORITY || '0x5Bd2F329C50860366c0E6D3b4227a422B66AD203',
          validUntil: Math.floor(Date.now() / 1000) + (params.validDays || 365) * 24 * 60 * 60,
          certificateHash: ethers.keccak256(ethers.toUtf8Bytes('certificate'))
        };
        break;
      
      case 'trade':
        publicValues = {
          commitment,
          fromAsset: params.fromAsset || 0,
          toAsset: params.toAsset || 1,
          fromAmount: params.fromAmount || 0,
          minToAmount: params.minToAmount || 0
        };
        break;
    }

    const response = {
      proof: proofData,
      publicValues,
      commitment,
      proofType,
      timestamp: Date.now()
    };

    // Cache the proof
    proofCache.set(cacheKey, response);

    res.json(response);

  } catch (error) {
    console.error(`Error generating ${proofType} proof:`, error);
    res.status(500).json({ 
      error: 'Failed to generate proof',
      details: error.message 
    });
  }
});

// Helper endpoint to compute commitment
app.post('/api/compute-commitment', (req, res) => {
  const { secret, nullifier } = req.body;
  
  if (!secret || !nullifier) {
    return res.status(400).json({ error: 'Missing secret or nullifier' });
  }

  try {
    const commitment = computeCommitment(secret, nullifier);
    res.json({ commitment });
  } catch (error) {
    res.status(500).json({ error: 'Failed to compute commitment' });
  }
});

// Helper endpoint to encode public values
app.post('/api/encode-public-values/:proofType', (req, res) => {
  const { proofType } = req.params;
  const values = req.body;

  try {
    let encoded;
    
    switch (proofType) {
      case 'ownership':
        encoded = ethers.AbiCoder.defaultAbiCoder().encode(
          ['bytes32', 'bytes32'],
          [values.commitment, values.nullifierHash]
        );
        break;
      
      case 'balance':
        console.log('Encoding balance proof with values:', values);
        try {
          encoded = ethers.AbiCoder.defaultAbiCoder().encode(
            ['bytes32', 'bytes32', 'uint256', 'uint64'],
            [values.commitment, values.merkleRoot, BigInt(values.minBalance), BigInt(values.assetId)]
          );
          console.log('Successfully encoded balance proof');
        } catch (encodeError) {
          console.error('Balance encoding error:', encodeError);
          throw encodeError;
        }
        break;
      
      case 'compliance':
        encoded = ethers.AbiCoder.defaultAbiCoder().encode(
          ['bytes32', 'address', 'uint256', 'bytes32'],
          [values.commitment, values.complianceAuthority, values.validUntil, values.certificateHash]
        );
        break;
      
      case 'trade':
        console.log('Encoding trade proof with values:', values);
        try {
          encoded = ethers.AbiCoder.defaultAbiCoder().encode(
            ['bytes32', 'uint64', 'uint64', 'uint256', 'uint256'],
            [
              values.commitment,
              BigInt(values.fromAsset),
              BigInt(values.toAsset),
              BigInt(values.fromAmount),
              BigInt(values.minToAmount)
            ]
          );
          console.log('Successfully encoded trade proof');
        } catch (encodeError) {
          console.error('Trade encoding error:', encodeError);
          throw encodeError;
        }
        break;
      
      default:
        return res.status(400).json({ error: 'Invalid proof type' });
    }

    res.json({ encoded });
  } catch (error) {
    console.error('Encode public values error:', error);
    res.status(500).json({ 
      error: 'Failed to encode public values',
      details: error.message 
    });
  }
});

// Health check
app.get('/health', (req, res) => {
  res.json({ status: 'ok', timestamp: Date.now() });
});

app.listen(PORT, () => {
  console.log(`Proof service running on port ${PORT}`);
  console.log(`ZK circuits path: ${ZK_CIRCUITS_PATH}`);
});