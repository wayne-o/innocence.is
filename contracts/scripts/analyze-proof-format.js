const { ethers } = require('ethers');

// Decode the transaction data from the console log
const txData = "0xd43ffa2f2ca1d6e9d24c4c4497d945d81cb5cf85c67ec7e066659c1b8c0a699470da72e90000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000046000000000000000000000000000000000000000000000000000000000000003e0000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000000000000001300000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000075eed07d0000000000000000000000000000000000000000000000000000000044c09eeb000000000000000000000000000000000000000000000000000000006ce4e4ba000000000000000000000000000000000000000000000000000000000ce229ec000000000000000000000000000000000000000000000000000000005731a63e0000000000000000000000000000000000000000000000000000000043d70381000000000000000000000000000000000000000000000000000000003313eb1a000000000000000000000000000000000000000000000000000000006626e50e00000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000050b20ae60000000000000000000000000000000000000000000000000000000065ef239a000000000000000000000000000000000000000000000000000000006d2ca4e20000000000000000000000000000000000000000000000000000000034d12915000000000000000000000000000000000000000000000000000000001237ce5a0000000000000000000000000000000000000000000000000000000040ddd8260000000000000000000000000000000000000000000000000000000001ee99bb00000000000000000000000000000000000000000000000000000000757f650a00000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000048d7e3bf000000000000000000000000000000000000000000000000000000004f23b02c000000000000000000000000000000000000000000000000000000005e4a40ec00000000000000000000000000000000000000000000000000000000572b1ff5000000000000000000000000000000000000000000000000000000001b4318550000000000000000000000000000000000000000000000000000000050cabbf8000000000000000000000000000000000000000000000000000000000803cd04000000000000000000000000000000000000000000000000000000001139dea000000000000000000000000000000000000000000000000000000000000000802ca1d6e9d24c4c4497d945d81cb5cf85c67ec7e066659c1b8c0a699470da72e90000000000000000000000005bd2f329c50860366c0e6d3b4227a422b66ad203000000000000000000000000000000000000000000000000000000006a23edaa925cec779426f44d8d555e01d2683a3a765ce2fa7562ca7352aeb09dfc57ea6a";

// Function signature for completeDeposit
const funcSig = txData.slice(0, 10);
console.log('Function signature:', funcSig);

// Decode the parameters
const paramsData = '0x' + txData.slice(10);
const abiCoder = ethers.AbiCoder.defaultAbiCoder();

// completeDeposit(bytes32 commitment, bytes calldata complianceProof, bytes calldata publicValues)
const decoded = abiCoder.decode(
  ['bytes32', 'bytes', 'bytes'],
  paramsData
);

console.log('\nDecoded parameters:');
console.log('1. Commitment:', decoded[0]);
console.log('2. Compliance Proof Length:', decoded[1].length, 'bytes');
console.log('3. Public Values Length:', decoded[2].length, 'bytes');

// Analyze the proof structure
console.log('\nüîç Analyzing Proof Structure:');
const proofBytes = decoded[1];
console.log('Proof hex:', proofBytes);

// The proof appears to be an encoded array of uint256 values
// Let's try to decode it
try {
  const proofArray = abiCoder.decode(['uint256[]'], proofBytes);
  console.log('\nProof decoded as uint256 array:');
  console.log('Array length:', proofArray[0].length);
  console.log('Values:', proofArray[0].map(v => v.toString()));
} catch (e) {
  console.log('Not a uint256 array');
}

// Check if it matches SP1 Groth16 format (4 bytes selector + 8 uint256)
console.log('\nüîç Checking SP1 Groth16 Format:');
if (proofBytes.length >= 4) {
  const selector = proofBytes.slice(0, 10); // First 4 bytes as hex string
  console.log('First 4 bytes (selector):', selector);
  
  // Expected selector from SP1VerifierGroth16
  const expectedSelector = '0xa4594c59';
  console.log('Expected SP1 selector:', expectedSelector);
  console.log('Match:', selector === expectedSelector ? '‚ùå NO' : '‚ùå NO');
}

console.log('\nüìä Public Values Analysis:');
const publicValues = decoded[2];
console.log('Public values hex:', publicValues);

// Decode public values
const publicDecoded = abiCoder.decode(
  ['bytes32', 'address', 'uint256', 'bytes32'],
  publicValues
);

console.log('\nDecoded public values:');
console.log('1. Commitment:', publicDecoded[0]);
console.log('2. Compliance Authority:', publicDecoded[1]);
console.log('3. Valid Until:', new Date(Number(publicDecoded[2]) * 1000).toISOString());
console.log('4. Certificate Hash:', publicDecoded[3]);